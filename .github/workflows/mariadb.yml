name: CI - MariaDB Migration

on:
  push:
    branches:
    - main
  # matches pull request for all branches and tag name
  pull_request:
   

defaults:
  # use bash for all jobs
  run:
    shell: bash
    
    
env:
  # these env variables are available to all jobs
  MANUAL: true
  PLAN: false
  APPLY: false
  DESTROY: false
  TEST: 'yes'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  

jobs:
  start:
    name: start
    #environment: development
    runs-on: ubuntu-latest
    needs: []
    #concurrency: development
    steps:
    - name: Starting deployment
      if: (env.manual == false)
      run: echo "Starting Deployment of RDS MariaDB in development environment."

  dev-deploy:
    name: dev-deploy
    environment: development
    runs-on: ubuntu-latest
    needs: [start]
    concurrency: development
    #if: github.event_name == 'pull_request'
    steps:
    - name: GitHub Actions Runner Set-up
      uses: actions/checkout@v2
    #- name: Terraform Repo Security Scan Set-up
    #  uses: triat/terraform-security-scan@v3
    - name: Terraform CLI Set-up
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      if: (env.MANUAL == false)
      run: terraform init
    - name: Terraform Validate
      if: (env.MANUAL == false)
      run: terraform validate
    - name: Terraform Variables
      run: |-
        cat dev.auto.tfvars <<EOF
        EOF
    - name: Terraform Plan
      if: (env.PLAN == true) && (env.MANUAL == false)
      run: terraform plan
    - name: Terraform Apply 
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && (env.APPLY == true) && (env.MANUAL == false)
      run: terraform apply -var-file=dev.auto.tfvars -auto-approve 
    - name: Terraform Destroy
      # if: ${{ env.DESTROY == true }} && (env.MANUAL == false)
      if: (env.DESTROY == true) && (env.MANUAL == false)
      run: terraform destroy -auto-approve
      
  stage-deploy:
    name: stage-deploy
    environment: staging
    runs-on: ubuntu-latest
    needs: [start]
    concurrency: staging
    steps:
    - name: GitHub Actions Runner Set-up
      uses: actions/checkout@v2
    #- name: Terraform Repo Security Scan Set-up
    #  uses: triat/terraform-security-scan@v3
    - name: Terraform CLI Set-up
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      if: (env.MANUAL == false)
      run: terraform init
    - name: Terraform Validate
      if: (env.MANUAL == false)
      run: terraform validate
    - name: Terraform Variables
      run: |-
        cat dev.auto.tfvars <<EOF
        EOF
    - name: Terraform Plan
      if: (env.PLAN == true) && (env.MANUAL == false)
      run: terraform plan
    - name: Terraform Apply 
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && (env.APPLY == true) && (env.MANUAL == false)
      run: terraform apply -var-file=stage.auto.tfvars -auto-approve 
    - name: Terraform Destroy
      # if: ${{ env.DESTROY == true }} && (env.MANUAL == false)
      if: (env.DESTROY == true) && (env.MANUAL == false)
      run: terraform destroy -auto-approve
    
  prod-deploy:
    name: prod-deploy
    environment: production
    runs-on: ubuntu-latest
    needs: [start]
    concurrency: staging
    steps:
    - name: GitHub Actions Runner Set-up
      uses: actions/checkout@v2
    #- name: Terraform Repo Security Scan Set-up
    #  uses: triat/terraform-security-scan@v3
    - name: Terraform CLI Set-up
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      if: (env.MANUAL == false)
      run: terraform init
    - name: Terraform Validate
      if: (env.MANUAL == false)
      run: terraform validate
    - name: Terraform Variables
      run: |-
        cat dev.auto.tfvars <<EOF
        EOF
    - name: Terraform Plan
      if: (env.PLAN == true) && (env.MANUAL == false)
      run: terraform plan
    - name: Terraform Apply 
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && (env.APPLY == true) && (env.MANUAL == false)
      run: terraform apply -var-file=prod.auto.tfvars -auto-approve 
    - name: Terraform Destroy
      # if: ${{ env.DESTROY == true }} && (env.MANUAL == false)
      if: (env.DESTROY == true) && (env.MANUAL == false)
      run: terraform destroy -auto-approve
      
  stop:
    name: stop
    #environment: development
    runs-on: ubuntu-latest
    needs: [dev-deploy, stage-deploy, prod-deploy]
    #concurrency: development
    steps:
    - name: Start deployment
      if: (env.manual == false)
      run: echo "Stopped Deployment of RDS MariaDB."
   # [skip ci]
