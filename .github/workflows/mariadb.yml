# ******************************************************************************************************************
# *                                                                                                                *
# *  Project: Migration Project                                                                                    *
# *                                                                                                                *
# *  Copyright Â© 2022 MongoExpUser. All Rights Reserved.                                                           *
# *                                                                                                                *
# *                                                                                                                *
# ******************************************************************************************************************


name: CI - MariaDB Migration

on:
  push:
    branches:
    - main
  pull_request:
  # matches pull request for all branches and tag name
    
defaults:
  run:
    shell: bash
    
env:
  APPLY: false
  DESTROY: false
  INIT: true
  PLAN: true
  VALIDATE: true
  # set-up AWS credentials at workflow level
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
jobs:
  start:
    name: start
    environment: start-stop
    concurrency: start-stop
    runs-on: ubuntu-latest
    needs: []
    if: ${{ (github.ref == 'refs/heads/main')  && (github.event_name == 'push') }}
    steps:
    - name: Start Deployment
      run: echo "Starting Deployment of RDS MariaDB.".

  dev-deploy:
    name: dev-deploy
    environment: development
    concurrency: development
    runs-on: ubuntu-latest
    needs: [start]
    if: ${{ (github.ref == 'refs/heads/main')  && (github.event_name == 'push') }}
    steps:
    - name: GitHub Actions Runner Set-up
      uses: actions/checkout@v2
    - name: Terraform CLI Set-up
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      run: if [[ $INIT = true ]]; then terraform init; fi
    - name: Terraform Validate
      run: if [[ $VALIDATE = true ]]; then terraform validate; fi
    - name: Terraform Plan
      run: |
        echo $APPLY
        if [[ $PLAN = true ]]; then terraform plan -var-file=dev.auto.tfvars; fi
    - name: Terraform Apply
      run: if [[ $APPLY = true ]]; then terraform apply -var-file=dev.auto.tfvars -auto-approve; fi
    - name: Terraform Destroy
      run: if [[ $DESTROY = true ]]; then terraform destroy -auto-approve; fi
      
  stage-deploy:
    name: stage-deploy
    environment: staging
    concurrency: staging
    runs-on: ubuntu-latest
    needs: [start]
    if: ${{ (github.ref == 'refs/heads/main')  && (github.event_name != 'push') }}
    steps:
    - name: GitHub Actions Runner Set-up
      uses: actions/checkout@v2
    - name: Terraform CLI Set-up
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      run: if [[ $INIT = true ]]; then terraform init; fi
    - name: Terraform Validate
      run: if [[ $VALIDATE = true ]]; then terraform validate; fi
    - name: Terraform Plan
      run: if [[ $PLAN = true ]]; then terraform plan -var-file=stage.auto.tfvars; fi
    - name: Terraform Apply
      run: if [[ $APPLY = true ]]; then terraform apply -var-file=stage.auto.tfvars -auto-approve; fi
    - name: Terraform Destroy
      run: if [[ $DESTROY = true ]]; then terraform destroy -auto-approve; fi
    
  prod-deploy:
    name: prod-deploy
    environment: production
    concurrency: production
    runs-on: ubuntu-latest
    needs: [start]
    if: ${{ (github.ref == 'refs/heads/main')  && (github.event_name != 'push') }}
    steps:
    - name: GitHub Actions Runner Set-up
      uses: actions/checkout@v2
    - name: Terraform CLI Set-up
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      run: if [[ $INIT = true ]]; then terraform init; fi
    - name: Terraform Validate
      run: if [[ $VALIDATE = true ]]; then terraform validate; fi
    - name: Terraform Plan
      run: if [[ $PLAN = true ]]; then terraform plan -var-file=prod.auto.tfvars; fi
    - name: Terraform Apply
      run: if [[ $APPLY = true ]]; then terraform apply -var-file=prod.auto.tfvars -auto-approve; fi
    - name: Terraform Destroy
      run: if [[ $DESTROY = true ]]; then terraform destroy -auto-approve; fi
    
  stop:
    name: stop
    environment: start-stop
    concurrency: start-stop
    runs-on: ubuntu-latest
    # needs: [dev-deploy, stage-deploy, prod-deploy] # set for dev, stage and prod environments
    needs: [dev-deploy] # set for only dev environment
    if: ${{ (github.ref == 'refs/heads/main')  && (github.event_name == 'push') }}
    steps:
    - name: Stop Deployment
      run: echo "Stopping Deployment of RDS MariaDB."
   
  # [skip ci]: skip workflows comment
